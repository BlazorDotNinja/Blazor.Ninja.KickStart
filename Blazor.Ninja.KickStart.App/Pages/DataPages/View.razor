@page "/data/view"
@layout UserContextLayout
@inherits BlazorNinjaComponent
@attribute [UserContextRequired]

<div class="blazor-ninja-page">
	@if (!string.IsNullOrEmpty(_itemId))
	{
		<DataView NamespaceLabel="Project"
				  ItemId=@_itemId
				  FieldGroups="@GetFieldGroups()">
		</DataView>
	}
</div>

@code
{
	private string _itemId;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		var token = await GetContextTokenAsync();

		var projectProxy = ProxyFactory.GetDataProxyForNamespace<GenericIdDataObject>(token, "Project");

		var projectPage = await projectProxy.GetPageAsync(Filter<GenericIdDataObject>.Empty, 0, int.MaxValue, SortOrder<GenericIdDataObject>.Empty);

		if (projectPage.Items.Any()) _itemId = projectPage.Items.First().Id;
	}

	private List<FieldGroup> GetFieldGroups()
	{
		var groups = new List<FieldGroup>();

		var group = new FieldGroup
		{
			Label = "Group1",
			FieldLabels = new List<string> { "Email", "Password", "Phone" }
		};

		groups.Add(group);

		group = new FieldGroup
		{
			Label = "Group2",
			FieldLabels = new List<string> { "Label", "Url", "Paragraph" }
		};
		groups.Add(group);

		group = new FieldGroup
		{
			Label = "Group3",
			FieldLabels = new List<string> { "Boolean", "Integer", "Double" }
		};
		groups.Add(group);

		group = new FieldGroup
		{
			Label = "Group4",
			FieldLabels = new List<string> { "Date", "Time", "DateTime" }
		};
		groups.Add(group);

		group = new FieldGroup
		{
			Label = "Group5",
			FieldLabels = new List<string> { "Option" }
		};
		groups.Add(group);

		return groups;
	}
}