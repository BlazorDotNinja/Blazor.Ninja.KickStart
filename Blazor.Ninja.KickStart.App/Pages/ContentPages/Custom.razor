@page "/content/custom"
@layout UserContextLayout
@inherits BlazorNinjaComponent

<div class="blazor-ninja-page">
    <div class="ninja-kick-start-app-container">
        <a href="/Content/AddContent" class="btn btn-primary content">
            Add New Content
        </a>
    </div>
    @if (_state == BlazorNinjaComponentState.Loading || _state == BlazorNinjaComponentState.Working)
    {
        <div class="blazor-ninja-flashing"></div>
    }
    <div class="ninja-kick-start-app-container">
        @foreach (var item in _contents)
        {
            var titleKey = item.MetaData.FirstOrDefault(x => x.Key == "Title");
            var title = titleKey.Value ?? string.Empty;

            var fileNameKey = item.MetaData.FirstOrDefault(x => x.Key == "FileName");
            var fileName = fileNameKey.Value ?? string.Empty;
            <div class="theme">
                <div class="img-holder">
                    <img @onclick="(async () => await OnDownloadAsync(item.Id,item.ContentType,fileName))" src="@GetContentType(item)" />
                </div>
                <input type="text"
                       required="required"
                       id="@item.Id"
                       @bind-value="@title"
                       @oninput="@((ChangeEventArgs e) => OnUpdateEnterAsync(e,title, item))"
                       disabled="@(!IsWaitingForInput(item.Id))" class="mr_60" />
                <div class="ninja-kick-start-app-container btn-section">
                    <button hidden="@(!CheckUpdateBtnVisibility(item.Id))" class="btn btn-primary mr_33" @onclick="(async () => await OnUpdateAsync(item))">Update</button>
                    <button hidden="@(CheckUpdateBtnVisibility(item.Id))" class="btn btn-primary mr_33" @onclick="(async () => OnEditAsync(item.Id))">Edit</button>
                    <button @onclick="(async () => await OnDeleteAsync(item.Id))" class="btn btn-primary">Delete</button>
                </div>
            </div>
        }
    </div>
</div>

@code {

    private IContentProxy _proxy;

    private List<Content> _contents = new List<Content>();

    private BlazorNinjaComponentState _state = BlazorNinjaComponentState.Loading;

    private bool _isUpdateButtonVisible = true;

    private string _currentItemId;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var token = await GetContextTokenAsync();

        _proxy = ProxyFactory.GetContentProxy(token, "OwlPhoto");

        await LoadAsync();

        _state = BlazorNinjaComponentState.WaitingForInput;
    }

    private async Task LoadAsync()
    {
        var contentPage = await _proxy.GetPageAsync(0, int.MaxValue);

        _contents = contentPage.Items;
    }

    private string GetContentType(Content content)
    {
        string _imgUrl;

        if (content.ContentType == "application/pdf")
        {
            _imgUrl = "_content/Blazor.Ninja.KickStart.App/images/pdf-image.png";
        }
        else if (content.ContentType == "application/octet-stream")
        {
            _imgUrl = "_content/Blazor.Ninja.KickStart.App/images/export-csv.png";
        }
        else
        {
            _imgUrl = content.Url;
        }
        return _imgUrl;
    }

    private async Task OnDeleteAsync(string id)
    {
        _state = BlazorNinjaComponentState.Working;

        await _proxy.DeleteAsync(id);

        await LoadAsync();

        _state = BlazorNinjaComponentState.WaitingForInput;
    }

    private async Task OnDownloadAsync(string id, string contentType, string fileName)
    {
        _state = BlazorNinjaComponentState.Working;

        var byteData = await _proxy.DownloadDataAsync(id, 0, int.MaxValue);

        await JSRuntime.InvokeVoidAsync(
"downloadFile", fileName, contentType, byteData);

        _state = BlazorNinjaComponentState.WaitingForInput;
    }



    private bool IsWaitingForInput(string id = default)
    {
        if (id == default) return _state == BlazorNinjaComponentState.WaitingForInput;

        return id == _currentItemId && _state == BlazorNinjaComponentState.WaitingForInput;
    }

    public void OnUpdateEnterAsync(ChangeEventArgs e, string title, Content content)
    {
        if (e.Value != null)
            content.MetaData["Title"] = e.Value.ToString();
    }

    private async Task OnUpdateAsync(Content content)
    {
        await _proxy.UpdateAsync(content);

        _currentItemId = default;

        _state = BlazorNinjaComponentState.WaitingForInput;
    }

    private void OnEditAsync(string id)
    {
        if (id != _currentItemId)
        {
            _isUpdateButtonVisible = false;
            _currentItemId = id;
        }
    }

    private bool CheckUpdateBtnVisibility(string id)
    {
        return _currentItemId != null ? (id == _currentItemId) : false;
    }
}
