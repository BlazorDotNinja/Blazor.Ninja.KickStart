@page  "/content/addcontent"
@layout UserContextLayout
@using Syncfusion.Blazor.Inputs
@inherits BlazorNinjaComponent
@using Blazor.Ninja.Common.Net.Http
@inject NavigationManager _NavigationManager


<div class="blazor-ninja-page">
    <div class="blazor-ninja-form-container">
        <EditForm OnValidSubmit="() =>AddNewItem()" Model="@FileData">
            <DataAnnotationsValidator />
            <InputText @bind-Value="FileData.Title" placeholder="Title"/>
            <ValidationMessage For="@(() => FileData.Title)" />
            <InputFile type="file" class="form-control"
                       FilterByExtension="true"
                       FileTooLargeMessage="File is too large to upload"
                       OnChange="HandleSelection" />
            <ValidationMessage For="@(() => FileData.file)" />
            <button type="submit" class="btn btn-primary">
                Create
            </button>
        </EditForm>
    </div>
</div>

@code{

    public FileUpload FileData = new FileUpload();

    private IContentProxy _proxy;

    private List<Content> _items = new List<Content>();

    private BlazorNinjaComponentState _state = BlazorNinjaComponentState.Loading;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var token = await GetContextTokenAsync();
        _proxy = ProxyFactory.GetContentProxy(token, "OwlPhoto");

        _state = BlazorNinjaComponentState.WaitingForInput;
    }

    public async Task AddNewItem()
    {
        await OnCreateAsync(FileData.ContentType, FileData.file, FileData.Title);
        _NavigationManager.NavigateTo("/content/custom");
    }

    private async Task OnCreateAsync(
     string contentType,
     byte[] data,
     string title)
    {
        _state = BlazorNinjaComponentState.Working;

        var content = new Content
        {
            ContentType = contentType
        };
        content.MetaData.Add("Title", title);
        content = await _proxy.CreateAsync(content);

        // TODO Upload it by using 100 KB chunks
        await _proxy.AppendDataAsync(content.Id, data);
        _state = BlazorNinjaComponentState.WaitingForInput;
    }

    private async Task HandleSelection(InputFileChangeEventArgs eventArgs)
    {
        FileData.file = new byte[eventArgs.File.Size];
        FileData.ContentType = eventArgs.File.ContentType;
    }
}
