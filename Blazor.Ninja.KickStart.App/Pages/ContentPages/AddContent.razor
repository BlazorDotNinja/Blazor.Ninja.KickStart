@page  "/content/addcontent"
@layout UserContextLayout
@inherits BlazorNinjaComponent
@inject NavigationManager _navigationManager
@using System.IO

<div class="blazor-ninja-page">
    <div class="ninja-kick-start-app-container">
        <EditForm OnValidSubmit="() =>AddNewItem()" Model="@FileData">
            <DataAnnotationsValidator />
            <InputText @bind-Value="FileData.Title" placeholder="Title" />
            <ValidationMessage For="@(() => FileData.Title)" />
            <InputFile type="file" class="form-control"
                       FilterByExtension="true"
                       OnChange="OnFileUpload" />
            <ValidationMessage For="@(() => FileData.File)" />
            <button type="submit" class="btn btn-primary">
                Create
            </button>
        </EditForm>
    </div>
</div>

@code{

    public FileUpload FileData = new FileUpload();

    private IContentProxy _proxy;

    private BlazorNinjaComponentState _state = BlazorNinjaComponentState.Loading;

    private long _maxFileSize = 16777216;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var token = await GetContextTokenAsync();
        _proxy = ProxyFactory.GetContentProxy(token, "OwlPhoto");

        _state = BlazorNinjaComponentState.WaitingForInput;
    }

    public async Task AddNewItem()
    {
        await OnCreateAsync(FileData.ContentType, FileData.File, FileData.Title, FileData.FileName);

        _navigationManager.NavigateTo("/content/custom");
    }

    private async Task OnCreateAsync(
     string contentType,
     byte[] filedata,
     string title,
     string fileName)
    {
        _state = BlazorNinjaComponentState.Working;

        var content = new Content
        {
            ContentType = contentType
        };
        content.MetaData.Add("Title", title);

        content.MetaData.Add("FileName", fileName);

        content = await _proxy.CreateAsync(content);

        int chunksSize = Convert.ToInt32(filedata.Length / 1000000); // chunks per size;

        int startNumber = 0;

        for (int i = 0; i <= chunksSize; i++)
        {
            if (i == chunksSize)
            {
                byte[] chunkArray = new byte[filedata.Length - startNumber];

                Array.Copy(filedata, startNumber, chunkArray, 0, chunkArray.Length);

                _proxy.AppendDataAsync(content.Id, chunkArray);
            }
            else
            {
                byte[] chunkArray = new byte[1000000];

                Array.Copy(filedata, startNumber, chunkArray, 0, 1000000);

                _proxy.AppendDataAsync(content.Id, chunkArray);

            }
            startNumber = startNumber + 1000000;
        }

        _state = BlazorNinjaComponentState.WaitingForInput;
    }

    private async Task OnFileUpload(InputFileChangeEventArgs eventArgs)
    {
        try
        {
            using (var ms = new MemoryStream())
            {
                await eventArgs.File.OpenReadStream(_maxFileSize).CopyToAsync(ms);

                FileData.File = ms.ToArray();
            }
            FileData.ContentType = eventArgs.File.ContentType;

            FileData.FileName = eventArgs.File.Name;
        }
        catch (Exception ex)
        {
            throw ExceptionBuilder.GetInstance(BlazorNinjaStatusCode.ExecutionFailed, ex);
        }
    }

}
