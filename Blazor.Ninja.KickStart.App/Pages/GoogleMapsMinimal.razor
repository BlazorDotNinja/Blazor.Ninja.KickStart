@page "/google-maps-minimal"
@layout AppLayout
@inherits DotNinjaComponent

<div class="dotninja-page-container">
	@if (_isInitialized)
	{
		<GoogleMapsForm @ref="_mapForm"
						Preferences=@_preferences
						Interactive=@false
						FetchUrl=@($"{NavigationManager.BaseUri}geofeaturegroup/{_id}")
						FetchThreshold=10000
						FeatureConfigs=@GetFeatureConfigs()>
		</GoogleMapsForm>
	}
</div>

@code {
	private bool _isInitialized;
	private GoogleMapsForm _mapForm;
	private MapPreferences _preferences;
	private string _id;

	private IDataProxy<GeoFeatureGroup> _geoFeatureGroupProxy;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		_preferences = await GetPreferencesAsync();

		var token = await GetContextTokenAsync();
		_geoFeatureGroupProxy = ProxyFactory.GetDataProxy<GeoFeatureGroup>(token);

		var page = await _geoFeatureGroupProxy.GetPageAsync(Filter<GeoFeatureGroup>.Empty, 0, 1, SortOrder<GeoFeatureGroup>.Empty);

		_id = page.Items[0].Id;

		_preferences.Center = page.Items[0].Center;
		_preferences.View = "hybrid";
		_preferences.Zoom = 19;

		_isInitialized = true;
	}

	private async Task<MapPreferences> GetPreferencesAsync()
	{
		MapPreferences preferences = null;
		try
		{
			preferences = await LocalStorage.GetItem<MapPreferences>("MapPreferences");
		}
		catch
		{
			// ignored
		}

		return preferences ?? new MapPreferences
		{
			Center = new[] { -117.09147794389497, 32.57281137785894 },
			Zoom = 18,
			View = "hybrid",
			Labels = true,
			Tiles = false,
			Use3D = false
		};
	}

	private static List<MapFeatureConfig> GetFeatureConfigs()
	{
		var configs = new List<MapFeatureConfig>();

		// Config for features where Type == "land"
		var config = new MapFeatureConfig
		{
			Type = "land",
			StrokeColor = "#FFB600",
			StrokeOpacity = 1,
			StrokeWeight = 1.5,
			FillColor = "#FFB600", // FFD264
			FillOpacity = 0.2,
			IconHtml = "<i class=\"fa fa-lemon-o\" aria-hidden=\"true\"></i>",
			ZIndex = 1
		};
		configs.Add(config);

		// Config for features where Type == "building"
		config = new MapFeatureConfig
		{
			Type = "building",
			StrokeColor = "#FE0006",
			StrokeOpacity = 1,
			StrokeWeight = 1.5,
			FillColor = "#FE0006", // FE6165
			FillOpacity = 0.2,
			IconHtml = "<i class=\"fa fa-building-o\" aria-hidden=\"true\"></i>",
			ZIndex = 2
		};
		configs.Add(config);

		return configs;
	}
}
