@page "/data"
@layout AppLayout
@inherits BlazorNinjaComponent

<div class="blazor-ninja-page-container">
	<div class="kickstart-project-form">
		<input type="text"
			   @bind="@_item.Label"
			   @bind:event="oninput"
			   @onkeydown="@OnCreateEnterAsync"
			   placeholder="Project name"
			   required="required"
			   disabled="@(!IsWaitingForInput())"
			   autofocus="autofocus" />
		<button @onclick="@OnCreateAsync" class="btn btn-primary">Create</button>
	</div>

	@if (_state == BlazorNinjaComponentState.Loading || _state == BlazorNinjaComponentState.Working)
	{
		<div class="blazor-ninja-flashing"></div>
	}

	<div class="kickstart-project-list-container">
		@foreach (var item in _items)
		{
			<div>
				<input type="text"
					   id="@item.Id"
					   @bind="@item.Label"
					   @bind:event="oninput"
					   @onkeydown="@(async (KeyboardEventArgs args) => await OnUpdateEnterAsync(args.Code, item.Id))"
					   placeholder="Project name"
					   required="required"
					   disabled="@(!IsWaitingForInput(item.Id))" />
				<button @onclick="(async () => await OnUpdateAsync(item.Id))" class="btn btn-primary">@GetEditButtonText(item.Id)</button>
				<button @onclick="(async () => await OnDeleteAsync(item.Id))" class="btn btn-primary">Delete</button>
			</div>
		}
	</div>
</div>

@code {

	private IDataProxy<Project> _proxy;

	private List<Project> _items = new List<Project>();

	private Project _item = new Project();

	private BlazorNinjaComponentState _state = BlazorNinjaComponentState.Loading;

	private string _currentItemId;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		var token = await GetContextTokenAsync();
		_proxy = ProxyFactory.GetDataProxy<Project>(token);

		_items = await LoadAsync();

		_state = BlazorNinjaComponentState.WaitingForInput;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (string.IsNullOrWhiteSpace(_currentItemId)) return;

		await JSRuntime.InvokeVoidAsync("window.blazorNinja.element.focus", _currentItemId);
	}

	public async Task OnCreateEnterAsync(KeyboardEventArgs e)
	{
		if (e.Code != "Enter" && e.Code != "NumpadEnter") return;

		await OnCreateAsync();
	}

	private async Task OnCreateAsync()
	{
		if (string.IsNullOrWhiteSpace(_item.Label)) return;

		_state = BlazorNinjaComponentState.Working;

		await _proxy.CreateAsync(_item);

		_item = new Project();

		_items = await LoadAsync();

		_state = BlazorNinjaComponentState.WaitingForInput;
	}

	private async Task OnUpdateAsync(string id)
	{
		if (id != _currentItemId)
		{
			_currentItemId = id;

			return;
		}

		_state = BlazorNinjaComponentState.Working;

		var item = _items.First(it => it.Id == id);

		await _proxy.UpdateAsync(item);

		_items = await LoadAsync();

		_currentItemId = default;

		_state = BlazorNinjaComponentState.WaitingForInput;
	}


	public async Task OnUpdateEnterAsync(string code, string id)
	{
		if (code != "Enter" && code != "NumpadEnter") return;

		await OnUpdateAsync(id);
	}

	private async Task OnDeleteAsync(string id)
	{
		_state = BlazorNinjaComponentState.Working;

		await _proxy.DeleteAsync(id);

		_items = await LoadAsync();

		_state = BlazorNinjaComponentState.WaitingForInput;

	}

	private async Task<List<Project>> LoadAsync()
	{
		var frame = await _proxy.GetFrameAsync(
			Filter<Project>.Empty,
			0,
			int.MaxValue,
			Builders<Project>.Sort.Descending(it => it.Created));

		return frame.Items;
	}

	private bool IsWaitingForInput(string id = default)
	{
		if (id == default) return _state == BlazorNinjaComponentState.WaitingForInput;

		return id == _currentItemId && _state == BlazorNinjaComponentState.WaitingForInput;
	}

	private string GetEditButtonText(string id)
	{
		if (id != _currentItemId) return "Edit";

		return "Update";
	}

}
