@page "/user/custom"
@layout UserContextLayout
@inherits BlazorNinjaComponent

<div class="blazor-ninja-page">
    @if (_state == BlazorNinjaComponentState.Loading || _state == BlazorNinjaComponentState.Working)
    {
        <div class="blazor-ninja-flashing"></div>
    }
    <div class="ninja-user-content-app-container">

        @foreach (var item in _customUsers)
        {
            <div class="box-wrap">
                <div class="user-pro">
                    <img src="@item.PhotoUrl" />
                </div>
                <div class="user-details">
                    <label>@item.FirstName @item.LastName</label>
                    @{
                        <label>Followers @item.Followers</label>
                    }

                    @{
                        <label>Following @item.Following</label>
                    }
                </div>
                <div class="follow-btn">
                    @{
                        var isFollow = _userFollow?.Following?.Any(x => x == item.Id) ?? false;
                        if (isFollow)
                        {
                            <button @onclick="(async () => await UnfollowAsync(item.Id))" class="btn btn-primary">UnFollow</button>
                        }
                        else
                        {
                            <button @onclick="(async () => await FollowAsync(item.Id))" class="btn btn-primary">Follow</button>
                        }
                    }
                </div>
            </div>
        }
    </div>
    <div class="pagination">
        @if (_totalRecords != 0)
        {
            <button class="btn btn-primary @(_currentPage==1?"disable-btn":"")" @onclick=@(async ()=>await NavigateBack())>Prev</button>
            @for (int p = 1; p <= (int)Math.Ceiling(_totalRecords / (decimal)_pageSize); p++)
            {
                var currentPage = p;
                <button type="button" class="@(_currentPage==currentPage?"btn btn-primary":"")" @onclick="(async ()=>await OnPageChange(currentPage))">@currentPage</button>
            }
            <button class="btn btn-primary @(_currentPage==(int)Math.Ceiling(_totalRecords / (decimal)_pageSize)?"disable-btn":"")" @onclick=@(async ()=>await NavigateForward())>Next</button>
        }
    </div>
</div>


@code {
    private IUserProxy<User> _proxy;

    private BlazorNinjaComponentState _state = BlazorNinjaComponentState.Loading;

    private User _currentUser = new User();

    private UserFollow _userFollow = new UserFollow();

    private List<CustomUser> _customUsers = new List<CustomUser>();

    private long _totalRecords;

    private int _currentPage = 1;

    private int _pageSize = 3;

    private int _pageNumber = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var token = await GetContextTokenAsync();

        _proxy = ProxyFactory.GetUserProxy<User>(token);

        await GetFollowDataAsync();

        _customUsers = await LoadAsync();

        _totalRecords = await _proxy.GetCountAsync(Filter<User>.Empty);

        _state = BlazorNinjaComponentState.WaitingForInput;
    }

    private async Task<List<CustomUser>> LoadAsync()
    {
        var userPage = await _proxy.GetPageAsync(Filter<User>.Empty, _pageNumber, _pageSize, SortOrder<User>.Empty);

        var users = userPage.Items;

        var customUserList = await Task.WhenAll(users.Select(async x => new CustomUser
        {
            Id = x.Id,
            PhotoUrl = x.PhotoUrl,
            FirstName = x.FirstName,
            LastName = x.LastName,
            Followers = await _proxy.GetFollowersAsync(x.Id),
            Following = await _proxy.GetFollowingAsync(x.Id)

        }));

        return customUserList.ToList();
    }

    private async Task FollowAsync(string id)
    {
        _state = BlazorNinjaComponentState.Working;

        await _proxy.FollowAsync(_currentUser.Id, id);

        await GetFollowDataAsync();

        _customUsers = await LoadAsync();

        _state = BlazorNinjaComponentState.WaitingForInput;
    }

    private async Task UnfollowAsync(string id)
    {
        _state = BlazorNinjaComponentState.Working;

        await _proxy.UnfollowAsync(_currentUser.Id, id);

        await GetFollowDataAsync();

        _customUsers = await LoadAsync();

        _state = BlazorNinjaComponentState.WaitingForInput;
    }

    public async Task NavigateForward()
    {
        _currentPage += 1;

        _pageNumber = _currentPage - 1;

        _customUsers = await LoadAsync();
    }

    public async Task NavigateBack()
    {
        _currentPage -= 1;

        _pageNumber = _pageNumber - 1;

        _customUsers = await LoadAsync();
    }


    public async Task OnPageChange(int page)
    {
        _currentPage = page;

        _pageNumber = page - 1;

        _customUsers = await LoadAsync();
    }

    private async Task GetFollowDataAsync()
    {
        var token = await GetContextTokenAsync();

        _proxy = ProxyFactory.GetUserProxy<User>(token);

        _currentUser = await _proxy.GetAsync();

        _userFollow = await _proxy.GetFollowDataAsync(_currentUser.Id);
    }
}
