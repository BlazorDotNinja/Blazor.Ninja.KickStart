@page "/user/custom"
@layout UserContextLayout
@inherits BlazorNinjaComponent

<div class="blazor-ninja-page">
    @if (_state == BlazorNinjaComponentState.Loading || _state == BlazorNinjaComponentState.Working)
    {
        <div class="blazor-ninja-flashing"></div>
    }
    <div class="blazor-ninja-theme-form-container">
        @foreach (var item in CustomUserLists)
        {
            <div class="flex-row">
                <div class="user-pro">
                    <img src="@item.PhotoUrl" />
                </div>
                <div class="user-details">
                    <label>@item.FirstName @item.LastName</label>
                    @{
                        <label>Followers @item.Followers</label>
                    }

                    @{
                        <label>Following @item.Following</label>
                    }
                </div>
                <div class="follow-btn">
                    @{
                        isFollow = _userFollow?.Following?.Any(x => x == item.Id) ?? false;
                        if (isFollow)
                        {
                            <button @onclick="(async () => await RemoveFollower(item.Id))" class="btn btn-primary">UnFollow</button>
                        }
                        else
                        {
                            <button @onclick="(async () => await AddFollower(item.Id))" class="btn btn-primary">Follow</button>
                        }
                    }
                </div>

            </div>
        }
    </div>
</div>


@code {

    private IUserProxy<User> _proxy;

    private List<User> _userList = new List<User>();

    private BlazorNinjaComponentState _state = BlazorNinjaComponentState.Loading;

    private User _currentUser = new User();

    private UserFollow _userFollow = new UserFollow();

    bool isFollow;

    public List<CustomUser> CustomUserLists = new List<CustomUser>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var token = await GetContextTokenAsync();
        _proxy = ProxyFactory.GetUserProxy<User>(token);

        _currentUser = await _proxy.GetAsync();

        _userFollow = await _proxy.GetFollowDataAsync(_currentUser.Id);

        CustomUserLists = await LoadAsync();


        _state = BlazorNinjaComponentState.WaitingForInput;
    }

    private async Task<List<CustomUser>> LoadAsync()
    {
        var getUsersList = await _proxy.GetPageAsync(Filter<User>.Empty, 0, 10000, SortOrder<User>.Empty);
        _userList = getUsersList.Items;

        var customUserList = await Task.WhenAll(_userList.Select(async x => new CustomUser
        {
            Id= x.Id,
            PhotoUrl = x.PhotoUrl,
            FirstName = x.FirstName,
            LastName = x.LastName,
            Followers = await _proxy.GetFollowersAsync(x.Id),
            Following = await _proxy.GetFollowingAsync(x.Id)

        }));

        return customUserList.ToList();
    }

    private async Task AddFollower(string id)
    {

        _state = BlazorNinjaComponentState.Working;

        await _proxy.FollowAsync(_currentUser.Id, id);

        await OnInitializedAsync();

        _state = BlazorNinjaComponentState.WaitingForInput;

    }

    private async Task RemoveFollower(string id)
    {
        _state = BlazorNinjaComponentState.Working;
        await _proxy.UnfollowAsync(_currentUser.Id, id);

        await OnInitializedAsync();

        _state = BlazorNinjaComponentState.WaitingForInput;
    }

}
