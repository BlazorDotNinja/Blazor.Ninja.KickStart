@page "/geo"
@inherits BlazorNinjaComponent
@layout UserContextLayout
@attribute [UserContextRequired]

<div class="blazor-ninja-page">
	<AddressForm Countries=@_countries
	             Regions=@_regions
	             Cities=@_cities
	             Address=@_address
	             CountryChanged=@OnCountryChangedAsync
	             RegionChanged=@OnRegionChangedAsync>
	</AddressForm>
	<div class="blazor-ninja-form-container">
		<button type="button" class="btn-primary" @onclick="@OnSubmit">Submit</button>
	</div>
</div>

@code {

	private IGeoProxy _proxy;
	private List<Country> _countries = new List<Country>();
	private List<Region> _regions = new List<Region>();
	private List<City> _cities = new List<City>();

	private readonly Address _address = new Address();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		var token = await GetContextTokenAsync();
		_proxy = ProxyFactory.GetGeoProxy(token);

		_countries = await _proxy.GetCountriesAsync();

		if (_address != null && _address.HasCountry)
		{
			var country = _countries.FirstOrDefault(it => string.Equals(it.Name, _address.Country, StringComparison.InvariantCultureIgnoreCase));
			if (country == null) throw ExceptionBuilder.GetInstance(BlazorNinjaStatusCode.NotFound, "");
			_regions = await _proxy.GetRegionsAsync(country.Id);
		}

		if (_address != null && _address.HasRegion)
		{
			var region = _regions.FirstOrDefault(it => string.Equals(it.Name, _address.Region, StringComparison.InvariantCultureIgnoreCase));
			if (region == null) throw ExceptionBuilder.GetInstance(BlazorNinjaStatusCode.NotFound, "");

			_cities = await _proxy.GetCitiesAsync(region.Id);
		}
	}

	private async Task OnCountryChangedAsync(Country country)
	{
		if (country == null) throw new ArgumentException(nameof(country));

		_regions = await _proxy.GetRegionsAsync(country.Id);

		if (!_regions.Exists(it => string.Equals(it.Name, _address.Region)))
		{
			_address.Region = null;
			_address.City = null;
		}
	}

	private async Task OnRegionChangedAsync(Region region)
	{
		if (region == null) throw new ArgumentException(nameof(region));

		_cities = await _proxy.GetCitiesAsync(region.Id);

		if (!_cities.Exists(it => string.Equals(it.Name, _address.City)))
		{
			_address.City = null;
		}
	}

	private void OnSubmit()
	{

	}

}
