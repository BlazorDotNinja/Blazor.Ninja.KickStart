@page "/google-maps"
@layout AppLayout
@inherits BlazorNinjaComponent

<div class="blazor-ninja-page-container">
	@if (_isInitialized)
	{
		<GoogleMapsForm @ref="_mapForm"
						Preferences=@_preferences
						FetchUrl=@($"{NavigationManager.BaseUri}geofeaturegroup")
						FetchThreshold=10000
						FeatureConfigs=@GetFeatureConfigs()
						ViewConfigs=@GetMapViewConfigs()
						TilesBounds=@(new[] {-105.58661082178514, 20.729730680807776, -105.29959299951952, 20.921143102362869})
						TilesUrl="https://orionscloud.blob.core.windows.net/a44feab9-9f77-4888-98da-8f2955673a6a/Tile/"
						PreferencesChanged=@OnMapPreferencesChangedAsync
						EditMenuButtons=@GetEditMenuButtons()
						CreateFeatureMethod=@CreateFeatureAsync
						GroupEditStarted=@OnGroupEditStarted
						UpdateGroupMethod=@UpdateGroupAsync
						DeleteGroupMethod=@DeleteGroupAsync
						EditMenuButtonClicked=@OnEditMenuButtonClicked
						GeoFeatureGroupId=@_id
						BackButtonEnabled=@true>
		</GoogleMapsForm>
	}
</div>

@code {

	private bool _isInitialized;
	private GoogleMapsForm _mapForm;
	private MapPreferences _preferences;
	private IDataProxy<GeoFeatureGroup> _geoFeatureGroupProxy;

	private string _id;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		var token = await GetContextTokenAsync();
		_geoFeatureGroupProxy = ProxyFactory.GetDataProxy<GeoFeatureGroup>(token);

		_preferences = await GetPreferencesAsync();

		var page = await _geoFeatureGroupProxy.GetPageAsync(Filter<GeoFeatureGroup>.Empty, 0, 1, SortOrder<GeoFeatureGroup>.Empty);

		if (page.Items.Any())
		{
			_id = page.Items[0].Id;
			_preferences.Center = page.Items[0].Center;
			_preferences.BullsEye = true;
			_preferences.Zoom = 19;
		}

		_isInitialized = true;
	}

	private async void OnMapPreferencesChangedAsync(
		MapPreferences preferences)
	{
		await LocalStorage.SetItem("MapPreferences", preferences);
	}

	private static List<MapFeatureConfig> GetFeatureConfigs()
	{
		var configs = new List<MapFeatureConfig>();

		// Config for features where Type == "land"
		var config = new MapFeatureConfig
		{
			Type = "land",
			StrokeColor = "#FFB600",
			StrokeOpacity = 1,
			StrokeWeight = 1.5,
			FillColor = "#FFB600", // FFD264
			FillOpacity = 0.2,
			IconHtml = "<i class=\"fa fa-lemon-o\" aria-hidden=\"true\"></i>",
			ZIndex = 1
		};
		configs.Add(config);

		// Config for features where Type == "building"
		config = new MapFeatureConfig
		{
			Type = "building",
			StrokeColor = "#FE0006",
			StrokeOpacity = 1,
			StrokeWeight = 1.5,
			FillColor = "#FE0006", // FE6165
			FillOpacity = 0.2,
			IconHtml = "<i class=\"fa fa-building-o\" aria-hidden=\"true\"></i>",
			ZIndex = 2
		};
		configs.Add(config);

		return configs;
	}

	private static List<MapViewConfig> GetMapViewConfigs()
	{
		var configs = new List<MapViewConfig>();

		var config = new MapViewConfig
		{
			Type = "roadmap",
			IconUrl = "/_content/Blazor.Ninja.KickStart.App/images/roadmap-min.png"
		};
		configs.Add(config);

		config = new MapViewConfig
		{
			Type = "hybrid",
			IconUrl = "/_content/Blazor.Ninja.KickStart.App/images/satellite-min.png"
		};
		configs.Add(config);

		return configs;
	}

	private async Task<MapPreferences> GetPreferencesAsync()
	{
		MapPreferences preferences = null;
		try
		{
			preferences = await LocalStorage.GetItem<MapPreferences>("MapPreferences");
		}
		catch
		{
			// ignored
		}

		return preferences ?? new MapPreferences
		{
			Center = new[] { -117.09147794389497, 32.57281137785894 },
			Zoom = 15,
			View = "hybrid",
			Labels = true,
			Tiles = false,
			Use3D = false
		};
	}

	private static List<ButtonVm> GetEditMenuButtons()
	{
		var buttons = new List<ButtonVm>();

		var button = new ButtonVm
		{
			Text = "Data",
			CssClass = "btn-primary",
		};
		buttons.Add(button);

		return buttons;
	}

	private async Task CreateFeatureAsync(
		MapFeatureVm vm)
	{
		var user = await GetUserAsync<GenericUser>();

		if (vm.Type == FeatureTypes.Land)
		{
			var filter = Builders<GeoFeatureGroup>.Filter.GeoIntersects("QueryPolygon", vm.Polygon.Coordinates);

			var page = await _geoFeatureGroupProxy.GetPageAsync(filter, 0, int.MaxValue, SortOrder<GeoFeatureGroup>.Empty);

			var geoGroup = new GeoFeatureGroup
			{
				LandFeature = new GeoFeature
				{
					Id = vm.Id,
					OwnerId = user.Id,
					Polygon = vm.Polygon,
					Created = DateTime.UtcNow,
					Updated = DateTime.UtcNow
				}
			};
			geoGroup = await _geoFeatureGroupProxy.CreateAsync(geoGroup);

			vm.GroupId = geoGroup.Id;
			var affectedVms = new List<MapFeatureVm> { vm };

			var groupIdsToDelete = new List<string>();
			foreach (var intersectingGroup in page.Items)
			{
				// TODO handle better this edge case
				if (intersectingGroup.HasLand) continue;

				while (intersectingGroup.Features.Count > 0)
				{
					var intersectingFeature = intersectingGroup.Features.First();

					var intersectingVm = new MapFeatureVm
					{
						Id = intersectingFeature.Id,
						Type = FeatureTypes.Building,
						Polygon = intersectingFeature.Polygon,
						GroupId = geoGroup.Id
					};

					affectedVms.Add(intersectingVm);

					intersectingGroup.Features.Remove(intersectingFeature);

					geoGroup.Features.Add(intersectingFeature);
				}

				if (intersectingGroup.HasLabel) geoGroup.AddLabel(intersectingGroup.Label);

				if (intersectingGroup.HasDescription) geoGroup.AddDescription(intersectingGroup.Description);

				geoGroup.AddEmails(intersectingGroup.Emails);

				geoGroup.AddPhones(intersectingGroup.Phones);

				geoGroup.AddUrls(intersectingGroup.Urls);

				geoGroup.AddTagInstanceGroups(intersectingGroup.TagInstanceGroups);

				if (!intersectingGroup.HasFeatures) groupIdsToDelete.Add(intersectingGroup.Id);
			}
			await _geoFeatureGroupProxy.UpdateAsync(geoGroup);
			await _geoFeatureGroupProxy.DeleteAsync(Builders<GeoFeatureGroup>.Filter.In(it => it.Id, groupIdsToDelete));

			// Update
			await _mapForm.UpdateFeaturesAsync(affectedVms);

			return;
		}

		if (vm.Type == FeatureTypes.Building)
		{
			var filter = Builders<GeoFeatureGroup>.Filter.GeoIntersects("QueryPolygon", vm.Polygon.Coordinates);

			var page = await _geoFeatureGroupProxy.GetPageAsync(filter, 0, int.MaxValue, SortOrder<GeoFeatureGroup>.Empty);

			if (!page.Items.Any())
			{
				var geoGroup = new GeoFeatureGroup();
				var feature = new GeoFeature
				{
					Id = vm.Id,
					OwnerId = user.Id,
					Polygon = vm.Polygon,
					Created = DateTime.UtcNow,
					Updated = DateTime.UtcNow
				};
				geoGroup.Features.Add(feature);
				geoGroup = await _geoFeatureGroupProxy.CreateAsync(geoGroup);

				vm.GroupId = geoGroup.Id;

				await _mapForm.UpdateFeaturesAsync(new List<MapFeatureVm> { vm });

				return;
			}

			foreach (var intersectingGroup in page.Items)
			{
				// TODO handle better this edge case
				if (!intersectingGroup.HasLand) continue;

				var feature = new GeoFeature
				{
					Id = vm.Id,
					Polygon = vm.Polygon,
					OwnerId = user.Id,
					Created = DateTime.UtcNow,
					Updated = DateTime.UtcNow
				};

				intersectingGroup.Features.Add(feature);

				await _geoFeatureGroupProxy.UpdateAsync(intersectingGroup);

				vm.GroupId = intersectingGroup.Id;

				await _mapForm.UpdateFeaturesAsync(new List<MapFeatureVm> { vm });

				// TODO handle better this edge case
				break;
			}

			return;
		}

		throw new NotImplementedException();
	}

	private void OnGroupEditStarted(
		string groupId)
	{
		if (string.IsNullOrWhiteSpace(groupId)) throw new ArgumentException(nameof(groupId));
	}

	private async Task UpdateGroupAsync(
		GoogleMapsForm.GroupUpdate update)
	{
		if (update == null) throw new ArgumentException(nameof(update));
		if (string.IsNullOrWhiteSpace(update.GroupId)) throw new ArgumentException(nameof(update.GroupId));

		var group = await _geoFeatureGroupProxy.GetAsync(update.GroupId);

		foreach (var vm in update.DeletedFeatures)
		{
			group.RemoveFeature(vm.Id);
		}

		foreach (var vm in update.EditedFeatures)
		{
			var feature = group.GetFeature(vm.Id);
			feature.Polygon = vm.Polygon;
		}

		if (group.HasLand || group.HasFeatures)
		{
			await _geoFeatureGroupProxy.UpdateAsync(group);
		}
		else await _geoFeatureGroupProxy.DeleteAsync(group.Id);
	}

	private async Task DeleteGroupAsync(
		string groupId)
	{
		if (string.IsNullOrWhiteSpace(groupId)) throw new ArgumentException(nameof(groupId));

		await _geoFeatureGroupProxy.DeleteAsync(groupId);
	}

	private void OnEditMenuButtonClicked(
		GoogleMapsForm.ButtonClickedEventArgs args)
	{
		if (args == null) throw new ArgumentException(nameof(args));
		if (string.IsNullOrWhiteSpace(args.GroupId)) throw new ArgumentException(nameof(args.GroupId));
		if (string.IsNullOrWhiteSpace(args.ButtonText)) throw new ArgumentException(nameof(args.ButtonText));
	}
}
