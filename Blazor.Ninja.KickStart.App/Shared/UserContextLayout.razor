@using System.Threading
@inherits BlazorNinjaLayoutComponent
@layout Layout
@implements IDisposable

<div class="blazor-ninja-header">
	<nav>
		<h2>Kickstart App</h2>
		<div class="img-container">
			@if (!string.IsNullOrEmpty(_headerPhotoUrl))
			{
				<img src="@_headerPhotoUrl" />
			}
			else
			{
				<i class="fa fa-user"></i>
			}
		</div>
	</nav>
</div>

<div class="blazor-ninja-content">
	@Body
</div>

<div class="blazor-ninja-footer">
	<nav>
		<a href="/dashboard" class="@GetCssClass("/dashboard")" onclick="@GetOnclickHandler("/dashboard")">
			<i class="fa fa-home"></i>
		</a>
		<a href="/notification" class="@GetCssClass("/notification")" onclick="@GetOnclickHandler("/notificaion")">
			<i class="fa fa-bell"></i>
			@if (_hasPendingNotifications)
			{
				<span></span>
			}
		</a>
		<a href="/menu" class="@GetCssClass("/menu")" onclick="@GetOnclickHandler("/menu")">
			<i class="fa fa-reorder"></i>
		</a>
	</nav>
</div>

@code
{
	private string _headerPhotoUrl;
	private bool _hasPendingNotifications;
	private CancellationTokenSource _cts;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		if (!await HasUserAsync()) return;

		var contextUser = await GetUserAsync();

		_headerPhotoUrl = contextUser.PhotoUrl;

		_cts = new CancellationTokenSource();
		var _ = Task.Run(async () => await FetchNotificationsAsync(_cts.Token));
	}

	private string GetOnclickHandler(string path)
	{
		if (IsSelected(path)) return "return false;";

		return "return true";
	}

	private string GetCssClass(string path)
	{
		if (IsSelected(path)) return "selected";

		return "";
	}

	private bool IsSelected(string path)
	{
		if (string.IsNullOrWhiteSpace(path)) throw new ArgumentException(nameof(path));

		var currentUrl = new Uri(NavigationManager.Uri);
		var currentPath = currentUrl.AbsolutePath;

		return string.Equals(path, currentPath, StringComparison.InvariantCultureIgnoreCase);
	}

	private async Task FetchNotificationsAsync(CancellationToken cancellationToken)
	{
		while (true)
		{
			if (!await HasUserAsync()) continue;

			try
			{
				var token = await GetUserTokenAsync();
				var notificationProxy = ProxyFactory.GetNotificationProxy<GenericMessage>(token);

				var contextUser = await GetUserAsync();
				if (contextUser == null) return;

				var filter = Builders<GenericMessage>.Filter.Eq(it => it.OwnerId, contextUser.Id)
							 & Builders<GenericMessage>.Filter.Ne(it => it.Status.Code, MessageStatusCode.Read);
				var frameResult = await notificationProxy.GetFrameAsync(filter, 0, 1, cancellationToken: cancellationToken);

				if (_hasPendingNotifications != frameResult.HasItems)
				{
					_hasPendingNotifications = frameResult.HasItems;
					await InvokeAsync(StateHasChanged);
				}

				await Task.Delay(3 * 1000, cancellationToken);
			}
			catch (TaskCanceledException)
			{
				break;
			}
			catch
			{
				// ignored
			}
		}
	}

	public void Dispose()
	{
		_cts?.Cancel();
	}
}


