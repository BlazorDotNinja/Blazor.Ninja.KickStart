@inherits ToDoTaskComponent

<div class="blazor-ninja-form-container kickstart-todo-task-list-container">

    <Spinner Show="IsLoadingOrWorking"></Spinner>

    @if (State == BlazorNinjaComponentState.Failed)
    {
        @if (HasMessage)
        {
            <div class="blazor-ninja-error-center">
                @Message
            </div>
        }
        <button type="button"
            class="btn-secondary"
            @onclick="@OnRetryClickedAsync">
            Retry
        </button>
    }

    @if (_items != default && _items.Any())
    {
        <SfGrid @ref="_grid" DataSource="@_items">
            <GridColumns>
                <GridColumn>
                    <Template>
                        @{
                        var task = (ToDoTask)context;
                        var inverseStatusId = GetInverseStatusId(task.StatusId);
                        <input type="checkbox"
                           checked="@IsResolved(task.StatusId)"
                           name="@task.Id"
                           disabled="@(IsNotWaitingForInput)"
                               @onchange="@(async () => await ChangedStatusAsync(task.Id, inverseStatusId))" />
                        <label for="@task.Id" title="@task.Body">@task.Title</label>
                    }
                </Template>
            </GridColumn>
            <GridColumn TextAlign="TextAlign.Right" Width="20%">
                <Template>
                    @{
                        var task = (ToDoTask)context;
                        <span class="@GetDueDateCssClass(task.DueDate)">@GetDateLabel(task.DueDate)</span>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>

        @if (_hasMore)
        {
            <button type="button" @onclick="@OnMoreClickedAsync" disabled="@IsNotWaitingForInput">
                More
            </button>
        }
    }

</div>